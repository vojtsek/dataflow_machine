
#Nacteni vstupu

In 99 Zadej (prvni >= druhe):
In 98 Zadej (prvni >= druhe):

#registry 98, 99 obsahuji na zacatku cisla, pro nez se hleda NSD

Register 99 0 In off off False True
Register 98 0 In off off False True

#registry 1, 2, 3, 4 obsahuji aktualni cisla v prubehu vypoctu, vzdy je povolena jen jedna z dvojic
#invariant: r1 == r3, r2 == r4

Register 1 0 Tr T off False False
Register 2 0 Tr T off False False
Register 3 0 Fal off off False False
Register 4 0 Fal off off False False

#registr 5 slouzi pro kontrolu, jestli jedno z cisel dospelo k jednicce

Register 5 1 No off on False True

#jeden z registru 6 a 7 bude na konci obsahovat vysledek
#ten je poslan do registru 8, ktery je vystupni

Register 6 1 Tr off on False False
Register 7 0 Tr off off False False
Register 8 0 No off off True False

#Nacteni vstupu

ICell 1 3
99 99
id

ICell 2 4
98 98
id

#Pokud se zmenila hodnota oproti vstupu, vstupni registry se prepnou do disabled

CCell 99
1 99
ne

CCell 98
2 98
ne

#Probiha odecitani mensiho od vetsiho (eukliduv algoritmus)
#vysledek sse prubezne uklada do r7, ten je ale zatim disabled
#vzdy se provede jen jedna z nasledujicih dvou bunek

ICell 1 3 7
1 2
minus

ICell 2 4 7
4 3
minus

#podle toho, ktere z cisel je vetsi, se do stavu enabled respektive disabled prepne jina dvojice

CCell 1 2 3 4 
1 2
gt

CCell 1 2 3 4 
3 4
gt

#pokud jedno z cisel dojde na hodnotu 1, r6 se prepne do enabled

CCell 6
1 5
eq

CCell 6
3 5
eq

CCell 6
2 5
eq

CCell 6
4 5
eq

#pokud jsou cisla shodna, r7 se prepne do enabled (obsahuje spravnou hodnotu)

CCell 7
1 2
eq

CCell 7
3 4
eq

#pokud je enabled jeden z r6 nebo r7, r8 se posle vysledek a program tim skonci

ICell 8
6 6
id

ICell 8
7 7
id